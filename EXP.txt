1. DRY Principle: The code follows the DRY (Don't Repeat Yourself) principle by using the `useState` hook to manage the state of the form inputs. This avoids the need to repeat code for each input field and makes the code more concise and maintainable.

2. Reusable Components: The code uses the `Card` component from the `../UI/Card` module, which can be reused in other parts of the application. This promotes code reuse and reduces duplication.

3. Event Handlers: The code uses a single event handler function `handleInputChange` to handle changes in all input fields. This promotes code reuse and avoids the need to write separate event handlers for each input field.

4. Spread Operator: The code uses the spread operator `...prevState` to update the state of the form inputs in the `handleInputChange` function. This promotes code reuse and avoids the need to write separate code for each input field.

5. Dynamic Input Fields: The code uses dynamic input fields by using the `name` attribute of the input element to update the corresponding state property in the `handleInputChange` function. This promotes code reuse and avoids the need to write separate code for each input field.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

- Seperation of Concern 
- Key mapping and showing on console

- Handling Form Data
- Keypress Event Handling 
- Controlled Component
- PrevState
- Stateful / Stateless Component -> Controlled Component

- list should have a filter method and show " no expense if there is nothing "

